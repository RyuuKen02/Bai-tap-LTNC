#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int MAX_W = 1000;
const int MAX_H = 1000;


bool isValid(int x, int y, int W, int H) {
    return (x >= 0 && x < H && y >= 0 && y < W);
}


bool hasPathOut(const vector<vector<char>>& maze, int W, int H) {
    vector<vector<bool>> visited(H, vector<bool>(W, false));
    queue<pair<int, int>> q;

   
    int startY = -1;
    for (int i = 0; i < W; i++) {
        if (maze[0][i] == 'Y') {
            startY = i;
            break;
        }
    }

    if (startY == -1) {
        return false; 
    }

    q.push(make_pair(0, startY));
    visited[0][startY] = true;

    
    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};

    while (!q.empty()) {
        pair<int, int> current = q.front();
        q.pop();

        int x = current.first;
        int y = current.second;

        
        if (x == H - 1) {
            return true;
        }

        
        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];

            if (isValid(newX, newY, W, H) && maze[newX][newY] != 'R' && !visited[newX][newY]) {
                q.push(make_pair(newX, newY));
                visited[newX][newY] = true;
            }
        }
    }

    return false;
}

int main() {
    int W, H;
    cin >> W >> H;

    vector<vector<char>> maze(H, vector<char>(W));


    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            cin >> maze[i][j];
        }
    }

    if (hasPathOut(maze, W, H)) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }

    return 0;
}
